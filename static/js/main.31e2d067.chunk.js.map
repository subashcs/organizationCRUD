{"version":3,"sources":["actions/types.js","views/Home.js","actions/index.js","App.js","serviceWorker.js","reducers/testReducer.js","reducers/organizationReducer.js","reducers/irrigationReducer.js","reducers/infoReducer.js","reducers/index.js","constants/index.js","sagas/irrigationgroups/index.js","sagas/organizations/index.js","sagas/index.js","index.js"],"names":["DISPLAY_MESSAGE","GET_ORGANIZATIONS","GET_ORGANIZATIONS_SUCCESS","ADD_ORGANIZATION","GET_IRRIGATIONGROUPS","GET_IRRIGATIONGROUPS_SUCCESS","ADD_IRRIGATIONGROUP","GET_FAILURE","ADD_FAILURE","CLEAR_ERROR","ADD_SUCCESS","connect","state","organizations","irrigationgroups","info","dispatch","getOrganizations","type","payload","addOrganization","data","getIrrigationGroups","addIrrigationGroup","props","initialOrgFormState","organizationName","primaryContactPersonName","initialIrrigFormState","totalBeneficiary","hasFormedWUSC","organization","useState","setOrganizations","setOrganization","irrigationGroup","setIrrigationGroup","currentlyAdded","setCurrentlyAdded","handleOrgInputChange","event","target","name","value","handleIrriInputChange","useEffect","message","toast","setTimeout","className","position","POSITION","TOP_RIGHT","onSubmit","preventDefault","newdata","today","Date","time","toLocaleString","hour","minute","second","hour12","date","getFullYear","getMonth","getDate","id","Math","floor","random","htmlFor","onChange","placeholder","org","checked","map","item","key","App","Boolean","window","location","hostname","match","initialState","success","rootReducer","combineReducers","test","action","SERVER","call","axios","get","response","status","push","put","post","organizationType","rootSaga","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31e2d067.chunk.js","sourcesContent":["export const DISPLAY_MESSAGE = 'DISPLAY_MESSAGE';\r\n\r\nexport const GET_ORGANIZATIONS = 'GET_ORGANIZATIONS';\r\nexport const GET_ORGANIZATIONS_SUCCESS='GET_ORGANIZATIONS_SUCCESS';\r\nexport const ADD_ORGANIZATION ='ADD_ORGANIZATION';\r\n\r\nexport const GET_IRRIGATIONGROUPS = 'GET_IRRIGATIONGROUPS';\r\nexport const GET_IRRIGATIONGROUPS_SUCCESS='GET_IRRIGATIONGROUPS_SUCCESS';\r\nexport const ADD_IRRIGATIONGROUP='ADD_IRRIGATIONGROUP';\r\n\r\nexport const GET_FAILURE = 'GET_FAILURE';\r\nexport const ADD_FAILURE = 'ADD_FAILURE';\r\nexport const CLEAR_ERROR='CLEAR_ERROR';\r\nexport const ADD_SUCCESS='ADD_SUCCESS';\r\n\r\n\r\n\r\n\r\n","import React,{useState,useEffect} from 'react';\r\nimport {ToastContainer,toast} from 'react-toastify';\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\n\r\nimport {connect} from 'react-redux';\r\nimport {getOrganizations,addOrganization,getIrrigationGroups,addIrrigationGroup} from '../actions';\r\n\r\nconst Home = (props) => {\r\n    \r\n    const initialOrgFormState={organizationName:\"\",primaryContactPersonName:\"\"};\r\n    const initialIrrigFormState={totalBeneficiary:\"\",hasFormedWUSC:true,organization:{}};\r\n    const [organizations,setOrganizations]=useState([]);\r\n    const [organization,setOrganization]=useState(initialOrgFormState);\r\n    const[irrigationGroup,setIrrigationGroup]= useState(initialIrrigFormState);\r\n    const [currentlyAdded,setCurrentlyAdded] = useState('');\r\n\r\n    const handleOrgInputChange = event => {\r\n        const {name, value} = event.target;\r\n        setOrganization({...organization, [name]: value})\r\n     \r\n\r\n    };\r\n\r\n    const handleIrriInputChange = event => {\r\n        const {name, value} = event.target;\r\n        setIrrigationGroup({...irrigationGroup, [name]: value});\r\n       \r\n    };\r\n\r\n    useEffect(()=>{\r\n        \r\n        props.getOrganizations();\r\n\r\n    },[])\r\n    \r\n    useEffect(()=>{\r\n        if(props.info.message){ \r\n            toast(props.info.message);\r\n\r\n        }\r\n    },[props.info])\r\n\r\n    useEffect(()=>{\r\n\r\n        setTimeout(()=>{\r\n            setOrganizations(props.organizations.message);\r\n            \r\n        },1000);\r\n    })\r\n\r\n    const addOrganization = ()=>{\r\n        if(organization.organizationName &&organization.primaryContactPersonName)\r\n        {\r\n            let newdata = organization;\r\n            var today = new Date();\r\n            const time= today.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric',second:'numeric', hour12: true });\r\n        \r\n            var date= today.getFullYear()+'/'+(today.getMonth()+1)+'/'+today.getDate();\r\n            var id =Math.floor(Math.random() * 10000);\r\n            newdata.id=\"organization\"+date+id+time;\r\n\r\n            props.addOrganization(newdata); \r\n            setCurrentlyAdded(newdata.id);\r\n            setOrganization(initialOrgFormState);\r\n        }\r\n        else{\r\n            toast(\"Please provide all inputs,have you forgot to add organization first\");  \r\n        }\r\n    }\r\n\r\n    const addIrrigationGroup =()=>{\r\n            if(irrigationGroup.hasFormedWUSC&&irrigationGroup.totalBeneficiary&&currentlyAdded){\r\n                let newdata = irrigationGroup;\r\n                var today = new Date();\r\n                const time= today.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric',second:'numeric', hour12: true });\r\n            \r\n                var date= today.getFullYear()+'/'+(today.getMonth()+1)+'/'+today.getDate();\r\n                var id =Math.floor(Math.random() * 10000);\r\n                newdata.id=\"irrigation-group\"+date+id+time;\r\n                \r\n                let org ={\r\n                    id:currentlyAdded\r\n                } \r\n                newdata.organization=org;\r\n                props.addIrrigationGroup(newdata);\r\n                setIrrigationGroup(initialIrrigFormState);\r\n            }\r\n            else{\r\n                toast(\"Please provide all inputs\");  \r\n\r\n            }\r\n    }\r\n    const toggleBar=()=>{\r\n        return (\r\n        <ToastContainer\r\n        position={toast.POSITION.TOP_RIGHT} \r\n           /> \r\n        )\r\n    }\r\n    return (\r\n        <div className=\"container-fluid\" >\r\n            {toggleBar()}\r\n            <form className=\"jumbotron\" onSubmit={(event)=>{event.preventDefault();addOrganization();}}>\r\n            <div className=\"form-group row\">\r\n                <label htmlFor=\"organizationName\" className=\"col-sm-2 col-form-label\">Organization Name</label>\r\n                <div className=\"col-sm-10\">\r\n                <input type=\"text\" className=\"form-control-plaintext\" name=\"organizationName\" id=\"organizationName\" value={organization.organizationName} onChange={handleOrgInputChange} placeholder=\"Enter organization Name\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n                <label htmlFor=\"primaryContactPersonName\" className=\"col-sm-2 col-form-label\">Contact Person Name</label>\r\n                <div className=\"col-sm-10\">\r\n                <input type=\"text\" className=\"form-control-plaintext\" id=\"primaryContactPersonName\" name=\"primaryContactPersonName\" value={organization.primaryContactPersonName} onChange={handleOrgInputChange} placeholder=\"Enter here\"/>\r\n                </div>\r\n            </div>\r\n             \r\n            <button type=\"submit\" className=\"btn btn-primary mb-2\">Add Organization</button>   \r\n           </form>\r\n\r\n\r\n           \r\n\r\n           <form className=\"jumbotron\"  onSubmit={(event)=>{event.preventDefault();addIrrigationGroup();}}>\r\n           <div className=\"form-group row\">\r\n                <label htmlFor=\"totalBeneficiary\" className=\"col-sm-2 col-form-label\">Total Beneficiary HH</label>\r\n                <div className=\"col-sm-10\">\r\n                <input type=\"number\"  className=\"form-control-plaintext\" name=\"totalBeneficiary\" id=\"totalBeneficiary\" value={irrigationGroup.totalBeneficiary} onChange={handleIrriInputChange} placeholder=\"Enter Total Beneficiary HH\"/>\r\n                </div>\r\n            </div>   \r\n            <fieldset className=\"form-group\">\r\n                <div className=\"row\">\r\n                <legend className=\"col-form-label col-sm-2 pt-0\">WUSC Formed</legend>\r\n                <div className=\"col-sm-10\">\r\n                    <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name=\"hasFormedWUSC\" id=\"hasFormedWUSC1\" value=\"true\" onChange={handleIrriInputChange} checked/>\r\n                    <label className=\"form-check-label\" htmlFor=\"hasFormedWUSC1\">\r\n                        True\r\n                    </label>\r\n                    </div>\r\n                    <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name=\"hasFormedWUSC\" id=\"hasFormedWUSC2\" value=\"false\" onChange={handleIrriInputChange}/>\r\n                    <label className=\"form-check-label\" htmlFor=\"hasFormedWUSC2\">\r\n                        False\r\n                    </label>\r\n                    </div>\r\n                   \r\n                    \r\n                </div>\r\n                </div>\r\n            </fieldset>\r\n                \r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"organizationType\">Organization Type</label>\r\n                <select className=\"form-control\" id=\"organizationType\">\r\n                    {\r\n                        organizations?(organizations.map((item,key)=>{\r\n                            return (\r\n                                <option key={key} className=\"black\">{item.organizationName}</option>\r\n                            )   \r\n                        })):''    \r\n                        \r\n                    }\r\n               \r\n                </select>\r\n            </div>\r\n                \r\n            <button type=\"submit\" className=\"btn btn-primary mb-2\">Add Irrigation User Group</button>   \r\n            </form>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps=(state)=>{\r\n    return{\r\n        organizations:state.organizations,\r\n        irrigationgroups:state.irrigationgroups,\r\n        info:state.info\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        getOrganizations:()=>dispatch(getOrganizations()),\r\n        addOrganization:(data)=>dispatch(addOrganization(data)),\r\n        getIrrigationGroups:()=>dispatch(getIrrigationGroups()),\r\n        addIrrigationGroup:(data)=>dispatch(addIrrigationGroup(data))\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);","import { \r\n  DISPLAY_MESSAGE,\r\n  GET_ORGANIZATIONS,\r\n  ADD_ORGANIZATION, \r\n  GET_IRRIGATIONGROUPS, \r\n  ADD_IRRIGATIONGROUP,\r\n} from './types';\r\n\r\nexport const displayMessage = () => {\r\n  return {\r\n    type: DISPLAY_MESSAGE,\r\n    payload: 'Displayed'\r\n  };\r\n};\r\n\r\nexport const getOrganizations =()=>{\r\n  return{\r\n    type:GET_ORGANIZATIONS,\r\n    payload:''\r\n  }\r\n}\r\nexport const addOrganization=(data)=>{\r\n  return {\r\n    type:ADD_ORGANIZATION,\r\n    payload:data\r\n  }\r\n}\r\nexport const getIrrigationGroups =()=>{\r\n  return{\r\n    type:GET_IRRIGATIONGROUPS,\r\n    payload:''\r\n  }\r\n}\r\nexport const addIrrigationGroup =(data)=>{\r\n  return {\r\n    type:ADD_IRRIGATIONGROUP,\r\n    payload:data\r\n  }\r\n}","import React from 'react';\nimport Home from './views/Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <h3 className=\"navbar-brand\">MyOrganization</h3>\n        </nav>  \n       \n        \n        <Home/>\n        <footer>\n        <div className=\"footer-copyright text-center py-3\">© 2018 developed by _ \n          Subash\n        </div>\n        </footer>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { DISPLAY_MESSAGE } from '../actions/types';\r\n\r\nlet initialState = [];\r\nexport default function testReducer(state = initialState, action) {\r\n  const data = action.payload;\r\n  switch (action.type) {\r\n    case DISPLAY_MESSAGE:\r\n      return { ...state, data };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { GET_ORGANIZATIONS_SUCCESS} from '../actions/types'; \r\n\r\nconst initialState = {success:false,message:{}};\r\n\r\nexport default function organizationReducer(state = initialState, action) {\r\n\r\n  const  message  = action.payload||[];\r\n\r\n\r\n\r\n  switch (action.type) {\r\n    case GET_ORGANIZATIONS_SUCCESS:\r\n      return { ...state, success: true, message };\r\n    default:\r\n      return {state};\r\n  }\r\n}\r\n","import { GET_IRRIGATIONGROUPS_SUCCESS} from '../actions/types'; \r\nconst initialState = {success:false,message:[]};\r\n\r\nexport default function irrigationReducer(state = initialState, action) {\r\n\r\n  const  message  = action.payload;\r\n\r\n  switch (action.type) {\r\n    case GET_IRRIGATIONGROUPS_SUCCESS:\r\n      return { ...state, success: true, message };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {GET_FAILURE, ADD_FAILURE,CLEAR_ERROR,ADD_SUCCESS} from '../actions/types'; \r\nconst initialState = [];\r\n\r\nexport default function infoReducer(state = initialState, action) {\r\n  const  message  = action.payload;\r\n\r\n  switch (action.type) {\r\n    case GET_FAILURE:\r\n      return { ...state, message };\r\n    case ADD_FAILURE:\r\n      return {...state,message}  \r\n    case CLEAR_ERROR:\r\n      return state; \r\n    case ADD_SUCCESS:\r\n      return {...state,message}  \r\n    default:\r\n      return state;\r\n  }\r\n  \r\n}\r\n","import { combineReducers } from 'redux';\r\nimport testReducer from './testReducer';\r\nimport organizationReducer from './organizationReducer';\r\nimport irrigationReducer from './irrigationReducer';\r\nimport infoReducer from './infoReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  test: testReducer,\r\n  info:infoReducer,\r\n  organizations:organizationReducer,\r\n  irrigationgroups:irrigationReducer\r\n\r\n});\r\nexport default rootReducer;\r\n","export const SERVER = \"https://5dd0d218d5f1a500149a87cd.mockapi.io/api/v1/\"","import {call,put} from 'redux-saga/effects';\r\nimport {SERVER } from '../../constants';\r\nimport {GET_IRRIGATIONGROUPS_SUCCESS, GET_IRRIGATIONGROUPS,GET_FAILURE,ADD_FAILURE,ADD_SUCCESS, GET_ORGANIZATIONS} from '../../actions/types';\r\nimport axios from 'axios';\r\nlet data = [];\r\n\r\nexport function* getIrrigationGroups(action) {\r\n    data = [];\r\n  \r\n    const response = yield call(axios.get, `${SERVER}/irrigation-user-groups`, action.payload);\r\n\r\n    if (response.status===200 && response.data) {  \r\n        response.data.map((item, key) => {\r\n            data.push({\r\n                id: item.id,\r\n                totalBeneficiary: item.totalBeneficiary,\r\n                hasFormedWUSC: item.hasFormedWUSC,\r\n                organization:item.organization\r\n            })\r\n            return null;\r\n\r\n        })\r\n\r\n    yield put({type: GET_IRRIGATIONGROUPS_SUCCESS, payload: data});\r\n        \r\n    }\r\n    else{\r\n         const message=\"Failed to get irrigation groups\"+response.status;\r\n         yield put({type:GET_FAILURE, payload: message});\r\n    }\r\n}\r\n\r\n\r\nexport function* addIrrigationGroup(action) {\r\n    let newdata = action.payload;\r\n    var today = new Date();\r\n    const time= today.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric',second:'numeric', hour12: true });\r\n\r\n    var date= today.getFullYear()+'/'+(today.getMonth()+1)+'/'+today.getDate();\r\n    var id =Math.floor(Math.random() * 10000);\r\n    newdata.id=\"ig\"+date+id+time;\r\n\r\n    \r\n    const response = yield call(axios.post, `${SERVER}/irrigation-user-groups`, action.payload);\r\n    \r\n\r\n    if(response.status>200 && response.data){\r\n       \r\n        yield put({type: GET_IRRIGATIONGROUPS, payload: ''});\r\n        yield put({type:GET_ORGANIZATIONS,payload:''});\r\n        \r\n        const message =\"Success!! Irrigation Group Added\";\r\n        yield put({type:ADD_SUCCESS, payload: message});\r\n    }\r\n    else{\r\n        const message =\"Failed To Add Irrigation Group, \"+response.status;\r\n        yield put({type:ADD_FAILURE, payload: message});\r\n    }\r\n\r\n}","import {call,put} from 'redux-saga/effects';\r\nimport {SERVER } from '../../constants';\r\nimport {GET_ORGANIZATIONS_SUCCESS, GET_ORGANIZATIONS, ADD_FAILURE,GET_FAILURE, ADD_SUCCESS} from '../../actions/types';\r\nimport axios from 'axios';\r\nlet data = [];\r\n\r\nexport function* getOrganizations(action) {\r\n    data = [];\r\n  \r\n    const response = yield call(axios.get, `${SERVER}/organizations`, action.payload);\r\n\r\n    if (response.status===200 && response.data) {  \r\n        response.data.map((item) => {\r\n            data.push({\r\n                id: item.id,\r\n                primaryContactPersonName: item.primaryContactPersonName,\r\n                organizationType: item.organizationType,\r\n                organizationName:item.organizationName,\r\n            })\r\n            return null;\r\n\r\n        })\r\n    yield put({type: GET_ORGANIZATIONS_SUCCESS, payload: data});\r\n        \r\n    }\r\n    else{\r\n        const message=\"Failed to get organizations\"+response.status;\r\n        yield put({type:GET_FAILURE, payload: message});\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function* addOrganization(action) {\r\n  \r\n\r\n    \r\n    const response = yield call(axios.post, `${SERVER}/organizations`, action.payload);\r\n    \r\n\r\n    if(response.status>=200){\r\n        yield put({type: GET_ORGANIZATIONS, payload: ''});\r\n        \r\n        const message =\"Success!! Organization Added\";\r\n        yield put({type:ADD_SUCCESS, payload: message});\r\n       \r\n    }\r\n    else{\r\n        const message =\"Failed To Add Organization, \"+response.status;\r\n        yield put({type:ADD_FAILURE, payload: message});\r\n       \r\n    }\r\n\r\n}","import { takeEvery } from 'redux-saga/effects';\r\nimport {GET_ORGANIZATIONS, ADD_ORGANIZATION, GET_IRRIGATIONGROUPS, ADD_IRRIGATIONGROUP,} from '../actions/types';\r\nimport { addIrrigationGroup, getIrrigationGroups } from './irrigationgroups';\r\nimport { addOrganization, getOrganizations } from './organizations';\r\n\r\n\r\nexport default function* rootSaga() {\r\n   yield takeEvery(GET_ORGANIZATIONS,getOrganizations);\r\n   yield takeEvery (ADD_ORGANIZATION,addOrganization);\r\n\r\n   yield takeEvery(GET_IRRIGATIONGROUPS,getIrrigationGroups);\r\n   yield takeEvery(ADD_IRRIGATIONGROUP,addIrrigationGroup);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, } from 'redux';\nimport rootReducer from './reducers';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga, store.dispatch);\n\nconst app = (\n    <Provider store={store}>\n\n        <App />\n      \n    </Provider>\n  );\n\nReactDOM.render(app,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}